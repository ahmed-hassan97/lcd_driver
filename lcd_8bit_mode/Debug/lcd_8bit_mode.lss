
lcd_8bit_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001da  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000050e  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000260  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000039a  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d8  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e4  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000025a  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  7a:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_write_command>:
		
		y[i]=(num%10)+48;
		num=(num/10);
	}
	for(i--;i>=0;--i){
		lcd_write_char(y[i]);
  82:	c1 98       	cbi	0x18, 1	; 24
  84:	88 23       	and	r24, r24
  86:	14 f4       	brge	.+4      	; 0x8c <lcd_write_command+0xa>
  88:	af 9a       	sbi	0x15, 7	; 21
  8a:	01 c0       	rjmp	.+2      	; 0x8e <lcd_write_command+0xc>
  8c:	af 98       	cbi	0x15, 7	; 21
	for(i=0;num!=0;i++){
		
		y[i]=(num%10)+48;
		num=(num/10);
	}
	for(i--;i>=0;--i){
  8e:	86 ff       	sbrs	r24, 6
  90:	02 c0       	rjmp	.+4      	; 0x96 <lcd_write_command+0x14>
  92:	ae 9a       	sbi	0x15, 6	; 21
  94:	01 c0       	rjmp	.+2      	; 0x98 <lcd_write_command+0x16>
		lcd_write_char(y[i]);
	}
	
	
}
  96:	ae 98       	cbi	0x15, 6	; 21
  98:	85 ff       	sbrs	r24, 5
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <lcd_write_command+0x1e>
  9c:	ad 9a       	sbi	0x15, 5	; 21
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <lcd_write_command+0x20>
  a0:	ad 98       	cbi	0x15, 5	; 21
  a2:	84 ff       	sbrs	r24, 4
  a4:	02 c0       	rjmp	.+4      	; 0xaa <lcd_write_command+0x28>
  a6:	ac 9a       	sbi	0x15, 4	; 21
  a8:	01 c0       	rjmp	.+2      	; 0xac <lcd_write_command+0x2a>
  aa:	ac 98       	cbi	0x15, 4	; 21
  ac:	83 ff       	sbrs	r24, 3
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <lcd_write_command+0x32>
  b0:	af 9a       	sbi	0x15, 7	; 21
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_write_command+0x34>
  b4:	af 98       	cbi	0x15, 7	; 21
	D7(READBIT(cmd,7));
	D6(READBIT(cmd,6));
	D5(READBIT(cmd,5));
	D4(READBIT(cmd,4));
	D7(READBIT(cmd,3));
	D6(READBIT(cmd,2));
  b6:	82 ff       	sbrs	r24, 2
  b8:	02 c0       	rjmp	.+4      	; 0xbe <lcd_write_command+0x3c>
  ba:	ae 9a       	sbi	0x15, 6	; 21
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <lcd_write_command+0x3e>
  be:	ae 98       	cbi	0x15, 6	; 21
	D5(READBIT(cmd,1));
  c0:	81 ff       	sbrs	r24, 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <lcd_write_command+0x46>
  c4:	ad 9a       	sbi	0x15, 5	; 21
  c6:	01 c0       	rjmp	.+2      	; 0xca <lcd_write_command+0x48>
  c8:	ad 98       	cbi	0x15, 5	; 21
	D4(READBIT(cmd,0));
  ca:	80 ff       	sbrs	r24, 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <lcd_write_command+0x50>
  ce:	ac 9a       	sbi	0x15, 4	; 21
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <lcd_write_command+0x52>
  d2:	ac 98       	cbi	0x15, 4	; 21
	TRIGGER;
  d4:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_write_command+0x58>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_write_command+0x5e>
  e0:	00 00       	nop
  e2:	c0 98       	cbi	0x18, 0	; 24
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_write_command+0x66>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_write_command+0x6c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <lcd_init>:
 *  Author: A
 */ 
#include "lcd_8bit_driver.h"

void lcd_init(){
	init_port;
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	84 bb       	out	0x14, r24	; 20
  f8:	b8 9a       	sbi	0x17, 0	; 23
  fa:	b9 9a       	sbi	0x17, 1	; 23
  fc:	81 ee       	ldi	r24, 0xE1	; 225
  fe:	94 e0       	ldi	r25, 0x04	; 4
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_init+0xe>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_init+0x14>
 106:	00 00       	nop
	_delay_ms(5);
	lcd_write_command(0x2);             //four bit mode
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write_command>
	lcd_write_command(0x28);            //four bit mode
 10e:	88 e2       	ldi	r24, 0x28	; 40
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write_command>
	lcd_write_command(CLEAR);          //clear lcd
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write_command>
	lcd_write_command(0xc);           //increment cursor
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write_command>
	lcd_write_command(LINE_ONE);    //start first one
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write_command>
 126:	87 e8       	ldi	r24, 0x87	; 135
 128:	93 e1       	ldi	r25, 0x13	; 19
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_init+0x38>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_init+0x3e>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <lcd_write_char>:
	
	
	
}
void lcd_write_char(uint8_t data){
	RS(1);           //write command
 134:	c1 9a       	sbi	0x18, 1	; 24
	D7(READBIT(data,7));
 136:	88 23       	and	r24, r24
 138:	14 f4       	brge	.+4      	; 0x13e <lcd_write_char+0xa>
 13a:	af 9a       	sbi	0x15, 7	; 21
 13c:	01 c0       	rjmp	.+2      	; 0x140 <lcd_write_char+0xc>
 13e:	af 98       	cbi	0x15, 7	; 21
	D6(READBIT(data,6));
 140:	86 ff       	sbrs	r24, 6
 142:	02 c0       	rjmp	.+4      	; 0x148 <lcd_write_char+0x14>
 144:	ae 9a       	sbi	0x15, 6	; 21
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_write_char+0x16>
 148:	ae 98       	cbi	0x15, 6	; 21
	D5(READBIT(data,5));
 14a:	85 ff       	sbrs	r24, 5
 14c:	02 c0       	rjmp	.+4      	; 0x152 <lcd_write_char+0x1e>
 14e:	ad 9a       	sbi	0x15, 5	; 21
 150:	01 c0       	rjmp	.+2      	; 0x154 <lcd_write_char+0x20>
 152:	ad 98       	cbi	0x15, 5	; 21
	D4(READBIT(data,4));
 154:	84 ff       	sbrs	r24, 4
 156:	02 c0       	rjmp	.+4      	; 0x15c <lcd_write_char+0x28>
 158:	ac 9a       	sbi	0x15, 4	; 21
 15a:	01 c0       	rjmp	.+2      	; 0x15e <lcd_write_char+0x2a>
 15c:	ac 98       	cbi	0x15, 4	; 21
	D7(READBIT(data,3));
 15e:	83 ff       	sbrs	r24, 3
 160:	02 c0       	rjmp	.+4      	; 0x166 <lcd_write_char+0x32>
 162:	af 9a       	sbi	0x15, 7	; 21
 164:	01 c0       	rjmp	.+2      	; 0x168 <lcd_write_char+0x34>
 166:	af 98       	cbi	0x15, 7	; 21
	D6(READBIT(data,2));
 168:	82 ff       	sbrs	r24, 2
 16a:	02 c0       	rjmp	.+4      	; 0x170 <lcd_write_char+0x3c>
 16c:	ae 9a       	sbi	0x15, 6	; 21
 16e:	01 c0       	rjmp	.+2      	; 0x172 <lcd_write_char+0x3e>
 170:	ae 98       	cbi	0x15, 6	; 21
	D5(READBIT(data,1));
 172:	81 ff       	sbrs	r24, 1
 174:	02 c0       	rjmp	.+4      	; 0x17a <lcd_write_char+0x46>
 176:	ad 9a       	sbi	0x15, 5	; 21
 178:	01 c0       	rjmp	.+2      	; 0x17c <lcd_write_char+0x48>
 17a:	ad 98       	cbi	0x15, 5	; 21
	D4(READBIT(data,0));
 17c:	80 ff       	sbrs	r24, 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <lcd_write_char+0x50>
 180:	ac 9a       	sbi	0x15, 4	; 21
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_write_char+0x52>
 184:	ac 98       	cbi	0x15, 4	; 21
	TRIGGER;
 186:	c0 9a       	sbi	0x18, 0	; 24
 188:	89 ef       	ldi	r24, 0xF9	; 249
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_write_char+0x58>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_write_char+0x5e>
 192:	00 00       	nop
 194:	c0 98       	cbi	0x18, 0	; 24
 196:	89 ef       	ldi	r24, 0xF9	; 249
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_write_char+0x66>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_write_char+0x6c>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <lcd_write_string>:
	
}
void lcd_write_string(uint8_t *str){
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
	while(*str!='\0'){
 1aa:	88 81       	ld	r24, Y
 1ac:	88 23       	and	r24, r24
 1ae:	31 f0       	breq	.+12     	; 0x1bc <lcd_write_string+0x18>
 1b0:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_char(*str);
 1b2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_char>
	D4(READBIT(data,0));
	TRIGGER;
	
}
void lcd_write_string(uint8_t *str){
	while(*str!='\0'){
 1b6:	89 91       	ld	r24, Y+
 1b8:	81 11       	cpse	r24, r1
 1ba:	fb cf       	rjmp	.-10     	; 0x1b2 <lcd_write_string+0xe>
		lcd_write_char(*str);
		str++;
		
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <main>:

#include "macro.h"
#include "lcd_8bit_driver.h"
int main(void)
{
	lcd_init();
 1c2:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_init>
	lcd_write_command(CLEAR);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write_command>
	lcd_write_string("ahmedhassan");
 1cc:	80 e6       	ldi	r24, 0x60	; 96
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_write_string>
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <main+0x12>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
